==21849== Memcheck, a memory error detector
==21849== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==21849== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==21849== Command: ./push_swap 5\ 3i\ \ 
==21849== Parent PID: 2693
==21849== 
==21849== Conditional jump or move depends on uninitialised value(s)
==21849==    at 0x48CF0D3: __vfprintf_internal (vfprintf-process-arg.c:58)
==21849==    by 0x48C37AE: printf (printf.c:33)
==21849==    by 0x109C6A: error (errors.c:33)
==21849==    by 0x109E14: check_bounds (errors.c:74)
==21849==    by 0x109F4B: check_argv (errors.c:104)
==21849==    by 0x1096BB: main (main.c:181)
==21849== 
==21849== Use of uninitialised value of size 8
==21849==    at 0x48C2A8B: _itoa_word (_itoa.c:177)
==21849==    by 0x48CEE9A: __vfprintf_internal (vfprintf-process-arg.c:164)
==21849==    by 0x48C37AE: printf (printf.c:33)
==21849==    by 0x109C6A: error (errors.c:33)
==21849==    by 0x109E14: check_bounds (errors.c:74)
==21849==    by 0x109F4B: check_argv (errors.c:104)
==21849==    by 0x1096BB: main (main.c:181)
==21849== 
==21849== Conditional jump or move depends on uninitialised value(s)
==21849==    at 0x48C2A9C: _itoa_word (_itoa.c:177)
==21849==    by 0x48CEE9A: __vfprintf_internal (vfprintf-process-arg.c:164)
==21849==    by 0x48C37AE: printf (printf.c:33)
==21849==    by 0x109C6A: error (errors.c:33)
==21849==    by 0x109E14: check_bounds (errors.c:74)
==21849==    by 0x109F4B: check_argv (errors.c:104)
==21849==    by 0x1096BB: main (main.c:181)
==21849== 
==21849== Conditional jump or move depends on uninitialised value(s)
==21849==    at 0x48CF38B: __vfprintf_internal (vfprintf-process-arg.c:174)
==21849==    by 0x48C37AE: printf (printf.c:33)
==21849==    by 0x109C6A: error (errors.c:33)
==21849==    by 0x109E14: check_bounds (errors.c:74)
==21849==    by 0x109F4B: check_argv (errors.c:104)
==21849==    by 0x1096BB: main (main.c:181)
==21849== 
==21849== 
==21849== HEAP SUMMARY:
==21849==     in use at exit: 0 bytes in 0 blocks
==21849==   total heap usage: 5 allocs, 5 frees, 1,061 bytes allocated
==21849== 
==21849== All heap blocks were freed -- no leaks are possible
==21849== 
==21849== Use --track-origins=yes to see where uninitialised values come from
==21849== For lists of detected and suppressed errors, rerun with: -s
==21849== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
